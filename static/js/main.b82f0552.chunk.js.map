{"version":3,"sources":["img/bg.png","gameHelper.js","components/styles/StyledCell.js","tetrominos.js","components/Cell.js","components/styles/StyledStage.js","components/Stage.js","components/styles/StyledDisplay.js","components/Display.js","components/styles/StyledStartButton.js","components/StartButton.js","components/styles/StyledTetris.js","hooks/useStage.js","components/styles/ArrowButton.js","components/ArrowButton.js","components/Tetris.js","hooks/usePlayer.js","hooks/useGameStatus.js","hooks/useInterval.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","createStage","Array","from","fill","checkCollision","player","stage","moveX","x","moveY","y","tetromino","length","pos","StyledCell","styled","div","props","color","type","TETROMINOS","0","shape","I","J","L","O","S","T","Z","randomTetromino","randTetromino","Math","floor","random","React","memo","StyledStage","height","width","Stage","map","row","cell","key","StyledDisplay","gameOver","Display","text","StyledStartButton","button","StartButton","callback","onClick","StyledTetrisWrapper","bgImage","StyledTetris","useStage","resetPlayer","useState","setStage","rowsCleared","setRowsCleared","useEffect","updateStage","prevStage","newStage","forEach","value","collided","reduce","ack","findIndex","prev","unshift","push","sweepRows","Arrow","ArrowButton","children","Tetris","dropTime","setDropTime","setGameOver","setPlayer","rotate","matrix","dir","rotatedTetro","_","index","col","reverse","useCallback","STAGE_WIDTH","clonedPlayer","JSON","parse","stringify","offset","console","log","usePlayer","updatePlayerPos","playerRotate","score","setScore","rows","setRows","level","setLevel","linePoints","calcScore","useGameStatus","movePlayer","drop","move","keyCode","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","role","tabIndex","onKeyDown","e","onKeyUp","style","display","flexDirection","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uGAAAA,EAAOC,QAAU,IAA0B,gC,oKCK9BC,EAAc,kBACvBC,QAAMC,KAAKD,gBAHa,KAGQ,kBAC5B,IAAIA,QALe,IAKIE,KAAK,CAAC,EAAG,cAG3BC,EAAiB,SAACC,EAAQC,EAAT,GAC1B,IADoE,IAAtBC,EAAqB,EAAxBC,EAAaC,EAAW,EAAdC,EAC7CA,EAAI,EAAGA,EAAIL,EAAOM,UAAUC,OAAQF,IACxC,IAAK,IAAIF,EAAI,EAAGA,EAAIH,EAAOM,UAAUD,GAAGE,OAAQJ,IAG5C,GAA8B,IAA3BH,EAAOM,UAAUD,GAAGF,MAIdF,EAAMI,EAAIL,EAAOQ,IAAIH,EAAID,KAEzBH,EAAMI,EAAIL,EAAOQ,IAAIH,EAAID,GAAOD,EAAIH,EAAOQ,IAAIL,EAAID,IAEa,UAAjED,EAAMI,EAAIL,EAAOQ,IAAIH,EAAID,GAAOD,EAAIH,EAAOQ,IAAIL,EAAID,GAAO,IAE1D,OAAO,G,0TCvBpB,IAAMO,EAAaC,IAAOC,IAAV,KAEA,SAAAC,GAAK,OAAIA,EAAMC,SACxB,SAAAD,GAAK,OAAoB,IAAfA,EAAME,KAAa,YAAc,eACzB,SAAAF,GAAK,OAAIA,EAAMC,SAChB,SAAAD,GAAK,OAAIA,EAAMC,SACjB,SAAAD,GAAK,OAAIA,EAAMC,SACd,SAAAD,GAAK,OAAIA,EAAMC,SCThCE,EAAa,CACtBC,EAAG,CAACC,MAAO,CAAC,CAAC,IAAKJ,MAAO,SACzBK,EAAG,CACCD,MAAO,CACH,CAAC,EAAG,IAAK,EAAG,GACZ,CAAC,EAAG,IAAK,EAAG,GACZ,CAAC,EAAG,IAAK,EAAG,GACZ,CAAC,EAAG,IAAK,EAAG,IAEhBJ,MAAO,gBAEXM,EAAG,CACCF,MAAO,CACH,CAAC,EAAG,IAAK,GACT,CAAC,EAAG,IAAK,GACT,CAAC,IAAK,IAAK,IAEfJ,MAAO,eAEXO,EAAG,CACCH,MAAO,CACH,CAAC,EAAG,IAAK,GACT,CAAC,EAAG,IAAK,GACT,CAAC,EAAG,IAAK,MAEbJ,MAAO,gBAEXQ,EAAG,CACCJ,MAAO,CACH,CAAC,IAAK,KACN,CAAC,IAAK,MAEVJ,MAAO,gBAEXS,EAAG,CACCL,MAAO,CACH,CAAC,EAAG,IAAK,KACT,CAAC,IAAK,IAAK,GACX,CAAC,EAAG,EAAG,IAEXJ,MAAO,eAEXU,EAAG,CACCN,MAAO,CACH,CAAC,EAAG,EAAG,GACP,CAAC,IAAK,IAAK,KACX,CAAC,EAAG,IAAK,IAEbJ,MAAO,gBAEXW,EAAG,CACCP,MAAO,CACH,CAAC,IAAK,IAAK,GACX,CAAC,EAAG,IAAK,KACT,CAAC,EAAG,EAAG,IAEXJ,MAAO,gBAIFY,EAAkB,WAC3B,IACMC,EADa,UACcC,KAAKC,MAAMD,KAAKE,SAD9B,UACoDtB,SACvE,OAAOQ,EAAWW,ICvDPI,MAAMC,MAJR,SAAC,GAAD,IAAGjB,EAAH,EAAGA,KAAH,OACT,kBAACL,EAAD,CAAYK,KAAMA,EAAMD,MAAOE,EAAWD,GAAMD,Y,0UCH7C,IAAMmB,EAActB,IAAOC,IAAV,KAGd,SAAAC,GAAK,OAAIA,EAAMqB,UACH,SAAArB,GAAK,OAAIA,EAAMsB,SAED,SAAAtB,GAAK,OAAIA,EAAMsB,SCGpCC,EAND,SAAC,GAAD,IAAGlC,EAAH,EAAGA,MAAH,OACV,kBAAC+B,EAAD,CAAaE,MAAOjC,EAAM,GAAGM,OAAQ0B,OAAQhC,EAAMM,QAC9CN,EAAMmC,KAAI,SAAAC,GAAG,OAAIA,EAAID,KAAI,SAACE,EAAMnC,GAAP,OAAa,kBAAC,EAAD,CAAMoC,IAAKpC,EAAGW,KAAMwB,EAAK,c,0ZCLjE,IAAME,EAAgB9B,IAAOC,IAAV,KAUb,SAAAC,GAAK,OAAKA,EAAM6B,SAAW,MAAQ,UCLjCC,EAJC,SAAC,GAAD,IAAGD,EAAH,EAAGA,SAAUE,EAAb,EAAaA,KAAb,OACZ,kBAACH,EAAD,CAAeC,SAAUA,GAAYE,K,wYCFlC,IAAMC,EAAoBlC,IAAOmC,OAAV,KCKfC,EAJK,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OAChB,kBAACH,EAAD,CAAmBI,QAASD,GAA5B,gB,ugBCDG,IAAME,EAAsBvC,IAAOC,IAAV,IAGVuC,KAKTC,EAAezC,IAAOC,IAAV,K,aCRZyC,EAAW,SAACpD,EAAQqD,GAAiB,IAAD,EACnBC,mBAAS3D,KADU,mBACtCM,EADsC,KAC/BsD,EAD+B,OAEPD,mBAAS,GAFF,mBAEtCE,EAFsC,KAEzBC,EAFyB,KAgD7C,OA5CAC,qBAAU,WAEND,EAAe,GAEf,IAUME,EAAc,SAAAC,GAEhB,IAAMC,EAAYD,EAAUxB,KAAI,SAAAC,GAAG,OAC/BA,EAAID,KAAI,SAAAE,GAAI,MAAiB,UAAZA,EAAK,GAAiB,CAAC,EAAG,SAAWA,QAgB1D,OAZAtC,EAAOM,UAAUwD,SAAQ,SAACzB,EAAKhC,GAC3BgC,EAAIyB,SAAQ,SAACC,EAAO5D,GACH,IAAV4D,IACCF,EAASxD,EAAIL,EAAOQ,IAAIH,GAAGF,EAAIH,EAAOQ,IAAIL,GAAK,CAC3C4D,EAD2C,UAExC/D,EAAOgE,SAAW,SAAW,iBAO7ChE,EAAOgE,UACNX,IA9BU,SAAAQ,GAAQ,OAAIA,EAASI,QAAO,SAACC,EAAK7B,GAChD,OAA6C,IAA1CA,EAAI8B,WAAU,SAAA7B,GAAI,OAAgB,IAAZA,EAAK,OAC1BmB,GAAe,SAAAW,GAAI,OAAIA,EAAO,KAC9BF,EAAIG,QAAQ,IAAIzE,MAAMiE,EAAS,GAAGtD,QAAQT,KAAK,CAAC,EAAG,WAC5CoE,IAEXA,EAAII,KAAKjC,GACF6B,KACR,IAuBYK,CAAUV,IAGdA,GAGXN,GAAS,SAAAa,GAAI,OAAIT,EAAYS,QAC9B,CAACpE,EAAQqD,IAEL,CAACpD,EAAOsD,EAAUC,I,qZCjDtB,IAAMgB,EAAQ9D,IAAOmC,OAAV,KCKH4B,EAJK,SAAC,GAAD,IAAG1B,EAAH,EAAGA,SAAU2B,EAAb,EAAaA,SAAb,OACpB,kBAACF,EAAD,CAAOxB,QAASD,GAAW2B,KC0HZC,EA3GA,WAAO,IAAD,EAEerB,mBAAS,MAFxB,mBAEVsB,EAFU,KAEAC,EAFA,OAGevB,oBAAS,GAHxB,mBAGVb,EAHU,KAGAqC,EAHA,OCfI,WAAO,IAAD,EACCxB,mBAAS,CACjC9C,IAAK,CAACL,EAAG,EAAGE,EAAG,GACfC,UAAWS,EAAW,GAAGE,MACzB+C,UAAU,IAJa,mBACpBhE,EADoB,KACZ+E,EADY,KAOrBC,EAAS,SAACC,EAAQC,GAEpB,IAAMC,EAAeF,EAAO7C,KAAI,SAACgD,EAAGC,GAAJ,OAC5BJ,EAAO7C,KAAI,SAAAkD,GAAG,OAAIA,EAAID,SAI1B,OAAGH,EAAM,EAAUC,EAAa/C,KAAI,SAAAC,GAAG,OAAIA,EAAIkD,aACxCJ,EAAaI,WA6BlBlC,EAAcmC,uBAAY,WAC5BT,EAAU,CACNvE,IAAK,CAAEL,EAAGsF,EAAqBpF,EAAG,GAClCC,UAAWmB,IAAkBR,MAC7B+C,UAAU,MAEf,IAEH,MAAO,CAAChE,EAhBgB,SAAC,GAAwB,IAAtBG,EAAqB,EAArBA,EAAGE,EAAkB,EAAlBA,EAAG2D,EAAe,EAAfA,SAC7Be,GAAU,SAAAX,GAAI,kCACPA,GADO,IAEV5D,IAAK,CAAEL,EAAIiE,EAAK5D,IAAIL,GAAKA,EAAIE,EAAI+D,EAAK5D,IAAIH,GAAKA,GAC/C2D,SAAUA,QAYeX,EAlCZ,SAACpD,EAAOiF,GACzB,IAAMQ,EAAeC,KAAKC,MAAMD,KAAKE,UAAU7F,IAC/C0F,EAAapF,UAAY0E,EAAOU,EAAapF,UAAW4E,GAGxD,IAFA,IAAM1E,EAAMkF,EAAalF,IAAIL,EACzB2F,EAAS,EACP/F,EAAe2F,EAAczF,EAAO,CAAEE,EAAG,EAAGE,EAAG,KAIjD,GAHAqF,EAAalF,IAAIL,GAAK2F,EACtBA,IAAWA,GAAUA,EAAS,EAAI,GAAK,IACvCC,QAAQC,IAAR,sBAA2BF,IACxBA,EAASJ,EAAapF,UAAU,GAAGC,OAGlC,OAFAyE,EAAOU,EAAapF,WAAY4E,QAChCQ,EAAalF,IAAIL,EAAIK,GAI7BuE,EAAUW,KDb+CO,GAL5C,mBAKVjG,EALU,KAKFkG,EALE,KAKe7C,EALf,KAK4B8C,EAL5B,OAMsB/C,EAASpD,EAAQqD,GANvC,mBAMVpD,EANU,KAMHsD,EANG,OEjBQ,SAAAC,GAAgB,IAAD,EACdF,mBAAS,GADK,mBACjC8C,EADiC,KAC1BC,EAD0B,OAEhB/C,mBAAS,GAFO,mBAEjCgD,EAFiC,KAE3BC,EAF2B,OAGdjD,mBAAS,GAHK,mBAGjCkD,EAHiC,KAG1BC,EAH0B,KAKlCC,EAAa,CACf,GACA,IACA,IACA,MAGEC,EAAYnB,uBAAY,WAEtBhC,EAAc,IACd6C,GAAS,SAAAjC,GAAI,OAAIA,EAAOsC,EAAWlD,EAAa,IAAOgD,EAAQ,MAC/DD,GAAQ,SAAAnC,GAAI,OAAIA,EAAOZ,QAE5B,CAACgD,EAAOE,EAAYlD,IAMvB,OAJAE,qBAAU,WACNiD,MACD,CAACA,EAAWnD,EAAa4C,IAErB,CAACA,EAAOC,EAAUC,EAAMC,EAASC,EAAOC,GFAWG,CAPzC,yBAOVR,EAPU,KAOHC,EAPG,KAOOC,EAPP,KAOaC,EAPb,KAOsBC,EAPtB,KAO6BC,EAP7B,KAQjBV,QAAQC,IAAI,aAEZ,IAAMa,EAAa,SAAA3B,GACXnF,EAAeC,EAAQC,EAAO,CAAEE,EAAG+E,EAAK7E,EAAG,KAC3C6F,EAAgB,CAAE/F,EAAG+E,EAAK7E,EAAG,KAe/ByG,EAAO,WAGNR,EAAqB,IAAbE,EAAQ,KACfC,GAAS,SAAArC,GAAI,OAAIA,EAAO,KAExBS,EAAY,KAAQ2B,EAAQ,GAAK,MAGjCzG,EAAeC,EAAQC,EAAO,CAAEE,EAAG,EAAGE,EAAG,KAItCL,EAAOQ,IAAIH,EAAI,IACd0F,QAAQC,IAAI,eACZlB,GAAY,GACZD,EAAY,OAEhBqB,EAAgB,CAAC/F,EAAG,EAAGE,EAAG,EAAG2D,UAAU,KARvCkC,EAAgB,CAAC/F,EAAG,EAAGE,EAAG,EAAG2D,UAAU,KAyBzC+C,EAAO,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACPvE,IACe,KAAZuE,EACCH,GAAY,GACM,KAAZG,EACNH,EAAW,GACO,KAAZG,GAVdnC,EAAY,MACZiC,KAW0B,KAAZE,GACNb,EAAalG,EAAO,KAShC,OGjGG,SAAqB8C,EAAUkE,GACpC,IAAMC,EAAgBC,mBAEtBzD,qBAAU,WACRwD,EAAcE,QAAUrE,IACvB,CAACA,IAGJW,qBAAU,WAIR,GAAc,OAAVuD,EAAgB,CAClB,IAAMI,EAAKC,aAJb,WACEJ,EAAcE,YAGeH,GAC7B,OAAO,WACLM,cAAcF,OAGjB,CAACJ,IH2EFO,EAAY,WACRV,MACDlC,GAGC,kBAAC3B,EAAD,CAAqBwE,KAAK,SAASC,SAAS,IAAIC,UAAW,SAAAC,GAAC,OAAIb,EAAKa,IAAIC,QAhC/D,SAAC,GAAe,IAAdb,EAAa,EAAbA,QACRvE,GACe,KAAZuE,GACCnC,EAAY,KAAQ2B,EAAQ,GAAK,OA8BrC,kBAACrD,EAAD,KACI,kBAAC,EAAD,CAAOlD,MAAOA,IACd,+BACKwC,EAAY,kBAAC,EAAD,CAASA,SAAUA,EAAUE,KAAK,cAC1C,6BACG,kBAAC,EAAD,CAASA,KAAI,iBAAYyD,KACzB,kBAAC,EAAD,CAASzD,KAAI,gBAAW2D,KACxB,kBAAC,EAAD,CAAS3D,KAAI,iBAAY6D,MAGjC,kBAAC,EAAD,CAAazD,SA5EX,WAEdQ,EAAS5D,KACTkF,EAAY,KACZxB,IACAyB,GAAY,GACZuB,EAAS,GACTE,EAAQ,GACRE,EAAS,OAsED,yBAAKqB,MAAO,CAACC,QAAS,SAClB,kBAAC,EAAD,CAAahF,SAAU,kBAAMgE,EAAK,CAAEC,QAAS,OAA7C,UACA,yBAAKc,MAAO,CAACC,QAAS,OAAQC,cAAe,WACzC,kBAAC,EAAD,CAAajF,SAAU,kBAAMgE,EAAK,CAAEC,QAAS,OAA7C,UACA,kBAAC,EAAD,CAAajE,SAAU,kBAAMgE,EAAK,CAAEC,QAAS,OAA7C,WAEJ,kBAAC,EAAD,CAAajE,SAAU,kBAAMgE,EAAK,CAAEC,QAAS,OAA7C,cI9GLiB,EANH,kBACV,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCOgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b82f0552.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg.2810fe6b.png\";","import { Array } from \"core-js\";\n\nexport const STAGE_WIDTH = 12;\nexport const STAGE_HEIGHT = 20;\n\nexport const createStage = () => \n    Array.from(Array(STAGE_HEIGHT), () => \n        new Array(STAGE_WIDTH).fill([0, 'clear'])\n    );\n\nexport const checkCollision = (player, stage, {x: moveX, y: moveY}) => {\n    for(let y = 0; y < player.tetromino.length; y++) {\n        for( let x = 0; x < player.tetromino[y].length; x++) {\n            \n            // 1. Check that we're on an actual Tetromino cell\n            if(player.tetromino[y][x] !== 0) {\n                if (\n                    // 2. Check that our move is inside the game areas height (y)\n                    // We shouldn't go through the bottom of the play area\n                    !stage[y + player.pos.y + moveY] ||\n                    // 3. Check that our move is inside the game areas width (x)\n                    !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] || \n                    // 4. Check that the cell we're moving to isn't set to clear\n                    stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !== 'clear'\n                ) {\n                    return true;\n                }\n\n            }\n        }\n    }\n}","import styled from 'styled-components';\n\nexport const StyledCell = styled.div`\n    width: auto;\n    background: rgba(${props => props.color}, 0.8);\n    border: ${props => (props.type === 0 ? '0px solid' : '4px solid')};\n    border-bottom-color: rgba(${props => props.color}, 0.1);\n    border-right-color: rgba(${props => props.color}, 1);\n    border-top-color: rgba(${props => props.color}, 1);\n    border-left-color: rgba(${props => props.color}, 0.3);\n`;","export const TETROMINOS = {\n    0: {shape: [[0]], color: '0,0,0'},\n    I: {\n        shape: [\n            [0, 'I', 0, 0],\n            [0, 'I', 0, 0],\n            [0, 'I', 0, 0],\n            [0, 'I', 0, 0],\n        ],\n        color: '80, 227, 230'\n    },\n    J: {\n        shape: [\n            [0, 'J', 0],\n            [0, 'J', 0],\n            ['J', 'J', 0],\n        ],\n        color: '36, 95, 223'\n    },\n    L: {\n        shape: [\n            [0, 'L', 0],\n            [0, 'L', 0],\n            [0, 'L', 'L'],\n        ],\n        color: '223, 173, 36'\n    },\n    O: {\n        shape: [\n            ['O', 'O'],\n            ['O', 'O']\n        ],\n        color: '223, 217, 36'\n    },\n    S: {\n        shape: [\n            [0, 'S', 'S'],\n            ['S', 'S', 0],\n            [0, 0, 0],\n        ],\n        color: '48, 211, 56'\n    },\n    T: {\n        shape: [\n            [0, 0, 0],\n            ['T', 'T', 'T'],\n            [0, 'T', 0],\n        ],\n        color: '132, 61, 198'\n    },\n    Z: {\n        shape: [\n            ['Z', 'Z', 0],\n            [0, 'Z', 'Z'],\n            [0, 0, 0],\n        ],\n        color: '227, 78, 78'\n    },\n}\n\nexport const randomTetromino = () => {\n    const tetrominos = 'IJLOSTZ';\n    const randTetromino = tetrominos[Math.floor(Math.random() * tetrominos.length)];\n    return TETROMINOS[randTetromino];\n}","import React from 'react';\nimport { StyledCell } from './styles/StyledCell';\nimport { TETROMINOS } from '../tetrominos';\n\nconst Cell = ({ type }) => (\n    <StyledCell type={type} color={TETROMINOS[type].color} />\n);\n\nexport default React.memo(Cell);","import styled from 'styled-components';\n\nexport const StyledStage = styled.div`\n    display: grid;\n    grid-template-rows: repeat(\n        ${props => props.height},\n        calc(25vw / ${props => props.width})\n    );\n    grid-template-columns: repeat(${props => props.width}, 1fr);\n    grid-gap: 1px;\n    border: 2px solid #333;\n    width: 100%;\n    max-width: 25vw;\n    background: #111;\n`;","import React from 'react';\n\nimport Cell from './Cell';\nimport { StyledStage } from './styles/StyledStage';\n\nconst Stage = ({ stage }) => (\n    <StyledStage width={stage[0].length} height={stage.length} >\n        {stage.map(row => row.map((cell, x) => <Cell key={x} type={cell[0]} />))}\n    </StyledStage>\n);\n\nexport default Stage;","import styled from 'styled-components';\n\nexport const StyledDisplay = styled.div`\n    box-sizing: border-box;\n    display: flex;\n    align-items: center;\n    margin: 0 0 20px 0;\n    padding: 20px;\n    border: 4px solid #333;\n    min-height: 30px;\n    width: 100%;\n    border-radius: 20px;\n    color: ${props => (props.gameOver ? 'red' : '#999')};\n    background: '#000';\n    font-family: Pixel, Arial, Helvetica, sans-serif;\n    font-size: 0.8rem;\n\n`;","import React from 'react';\nimport { StyledDisplay } from './styles/StyledDisplay';\n\nconst Display = ({ gameOver, text}) => (\n    <StyledDisplay gameOver={gameOver} >{text}</StyledDisplay>\n);\n\nexport default Display;","import styled from 'styled-components';\n\nexport const StyledStartButton = styled.button`\n    box-sizing: border-box;\n    margin: 0 0 20px 0;\n    padding: 20px;\n    min-height: 30px;\n    width: 100%;\n    border-radius: 20px;\n    border: none;\n    color: white;\n    background: #333;\n    font-family: Pixel, Arial, Helvetica, sans-serif;\n    font-size: 1rem;\n    outline: none;\n    cursor: pointer;\n`;","import React from 'react';\nimport { StyledStartButton } from './styles/StyledStartButton';\n\nconst StartButton = ({ callback }) => (\n    <StyledStartButton onClick={callback} >Start Game</StyledStartButton>\n);\n\nexport default StartButton;","import styled from 'styled-components';\nimport bgImage from '../../img/bg.png';\n\nexport const StyledTetrisWrapper = styled.div`\n    width: 100vw;\n    height: 100vh;\n    background: url(${bgImage}) #000;\n    background-size: cover;\n    overflow: hidden;\n`;\n\nexport const StyledTetris = styled.div`\n    display: flex;\n    align-items: flex-start;\n    padding: 40px;\n    margin: 0 auto;\n    max-width: 900px;\n\n    aside {\n        width: 100%;\n        max-width: 200px;\n        display: block;\n        padding: 0 20px;\n    }\n`;","import  {useState, useEffect} from 'react';\nimport {createStage } from '../gameHelper';\n\nexport const useStage = (player, resetPlayer) => {\n    const [stage, setStage] = useState(createStage());\n    const [rowsCleared, setRowsCleared] = useState(0);\n\n    useEffect(() => {\n\n        setRowsCleared(0);\n\n        const sweepRows = newStage => newStage.reduce((ack, row) => {\n            if(row.findIndex(cell => cell[0] === 0) === -1) {\n                setRowsCleared(prev => prev + 1);\n                ack.unshift(new Array(newStage[0].length).fill([0, 'clear']));\n                return ack;\n            }\n            ack.push(row);\n            return ack;\n        }, [])\n\n        const updateStage = prevStage => {\n            // First flush the stage\n            const newStage  = prevStage.map(row =>\n                row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell ))\n            );\n\n            // Then draw the tetromino\n            player.tetromino.forEach((row, y) => {\n                row.forEach((value, x) => {\n                    if(value !== 0) {\n                        newStage[y + player.pos.y][x + player.pos.x] = [\n                            value,\n                            `${player.collided ? 'merged' : 'clear'}`,\n                        ]\n                    }\n                })\n            });\n\n            // Then check if collided\n            if(player.collided) {\n                resetPlayer();\n                return sweepRows(newStage);\n            }\n\n            return newStage;\n        }\n\n        setStage(prev => updateStage(prev));\n    }, [player, resetPlayer]);\n\n    return [stage, setStage, rowsCleared];\n}","import styled from 'styled-components';\n\nexport const Arrow = styled.button`\n    box-sizing: border-box;\n    margin: 5px;\n    padding: 5px;\n    min-height: 30px;\n    width: 100%;\n    border-radius: 20px;\n    border: none;\n    color: white;\n    background: #333;\n    font-family: Pixel, Arial, Helvetica, sans-serif;\n    font-size: 1rem;\n    outline: none;\n    cursor: pointer;\n    content: 'Left'\n`;","import React from 'react';\nimport { Arrow } from './styles/ArrowButton';\n\nconst ArrowButton = ({ callback, children }) => (\n<Arrow onClick={callback}>{children}</Arrow>\n);\n\nexport default ArrowButton;","import React, {useState} from 'react';\nimport {createStage, checkCollision} from '../gameHelper';\n\n//components\n\nimport Stage from './Stage';\nimport Display from './Display';\nimport StartButton from './StartButton';\n\n// Styled components\nimport { StyledTetrisWrapper, StyledTetris } from './styles/StyledTetris';\n\n// Custom hooks\nimport { useInterval } from '../hooks/useInterval';\nimport {usePlayer} from '../hooks/usePlayer';\nimport {useStage} from '../hooks/useStage';\nimport { useGameStatus } from '../hooks/useGameStatus';\nimport ArrowButton from './ArrowButton';\n\nconst Tetris = () => {\n\n    const [dropTime, setDropTime] = useState(null);\n    const [gameOver, setGameOver] = useState(false);\n\n    const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\n    const [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\n    const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(rowsCleared);\n    console.log('re-render');\n\n    const movePlayer = dir => {\n        if(!checkCollision(player, stage, { x: dir, y: 0 })) {\n            updatePlayerPos({ x: dir, y: 0 });\n        }\n    }\n\n    const startGame = () => {\n        // Reset everything\n        setStage(createStage());\n        setDropTime(1000);\n        resetPlayer();\n        setGameOver(false);\n        setScore(0);\n        setRows(0);\n        setLevel(0);\n    }\n\n    const drop = () => {\n\n        // Increase level when player has cleared  10 rows\n        if(rows > (level + 1) * 10){\n            setLevel(prev => prev + 1);\n            // Also increase speed\n            setDropTime(1000 / (level + 1) + 200)\n        }\n\n        if(!checkCollision(player, stage, { x: 0, y: 1 })) {\n            updatePlayerPos({x: 0, y: 1, collided: false});\n        } else {\n            // Game over\n            if(player.pos.y < 1) {\n                console.log('Game Over!!');\n                setGameOver(true);\n                setDropTime(null);\n            }\n            updatePlayerPos({x: 0, y: 0, collided: true});\n        }\n    }\n\n    const keyUp = ({keyCode}) => {\n        if(!gameOver) {\n            if(keyCode === 40) {\n                setDropTime(1000 / (level + 1) + 200);\n            }\n        }\n    }\n\n    const dropPlayer = () => {\n        setDropTime(null);\n        drop();\n    }\n\n    const move = ({keyCode}) => {\n        if(!gameOver) {\n            if(keyCode === 37) {\n                movePlayer(-1);\n            } else if(keyCode === 39 ) {\n                movePlayer(1)\n            } else if(keyCode === 40 ) {\n                dropPlayer()\n            } else if(keyCode === 38 ) {\n                playerRotate(stage, 1);\n            }\n        }\n    }\n\n    useInterval(() => {\n        drop();\n    }, dropTime);\n\n    return (\n        <StyledTetrisWrapper role=\"button\" tabIndex=\"0\" onKeyDown={e => move(e)} onKeyUp={keyUp} >\n            <StyledTetris>\n                <Stage stage={stage} />\n                <aside>\n                    {gameOver ? (<Display gameOver={gameOver} text=\"Game Over\" />) : \n                        (<div>\n                            <Display text={`Score: ${score}`} />\n                            <Display text={`Rows: ${rows}`} />\n                            <Display text={`Level: ${level}`} />\n                        </div>)\n                    }\n                    <StartButton callback={startGame} />\n                </aside>\n                <div style={{display: 'flex'}}>\n                    <ArrowButton callback={() => move({ keyCode: 37 })}>&#x2B05;</ArrowButton>\n                    <div style={{display: 'flex', flexDirection: 'column'}}>\n                        <ArrowButton callback={() => move({ keyCode: 38 })}>&#x2B06;</ArrowButton>\n                        <ArrowButton callback={() => move({ keyCode: 40 })}>&#x2B07;</ArrowButton>\n                    </div>\n                    <ArrowButton callback={() => move({ keyCode: 39 })}>&#x27A1;</ArrowButton>\n                </div>\n            </StyledTetris>\n        </StyledTetrisWrapper>\n    );\n};\n\nexport default Tetris;","import  {useState, useCallback} from 'react';\nimport { TETROMINOS, randomTetromino } from '../tetrominos';\nimport { STAGE_WIDTH, checkCollision } from '../gameHelper';\n\nexport const usePlayer = () => {\n    const [player, setPlayer] = useState({\n        pos: {x: 0, y: 0},\n        tetromino: TETROMINOS[0].shape,\n        collided: false\n    });\n\n    const rotate = (matrix, dir) => {\n        // Make rows to become cols (transpose)\n        const rotatedTetro = matrix.map((_, index) => \n            matrix.map(col => col[index])\n        );\n\n        // Reverse each row to get a rotated matrix\n        if(dir > 0) return rotatedTetro.map(row => row.reverse());\n        return rotatedTetro.reverse();\n    }\n\n    const playerRotate = (stage, dir) => {\n        const clonedPlayer = JSON.parse(JSON.stringify(player));\n        clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\n        const pos = clonedPlayer.pos.x;\n        let offset = 1;\n        while(checkCollision(clonedPlayer, stage, { x: 0, y: 0 })) {\n            clonedPlayer.pos.x += offset;\n            offset = -(offset + (offset > 0 ? 1 : -1));\n            console.log(`offset is:  ${offset}`)\n            if(offset > clonedPlayer.tetromino[0].length) {\n                rotate(clonedPlayer.tetromino, -dir);\n                clonedPlayer.pos.x = pos;\n                return;\n            }\n        }\n        setPlayer(clonedPlayer);\n    }\n\n    const updatePlayerPos = ({ x, y, collided }) => {\n        setPlayer(prev => ({\n            ...prev,\n            pos: { x: (prev.pos.x += x), y: (prev.pos.y += y)},\n            collided: collided\n        }));\n    }\n\n    const resetPlayer = useCallback(() => {\n        setPlayer({\n            pos: { x: STAGE_WIDTH / 2 - 2, y: 0},\n            tetromino: randomTetromino().shape,\n            collided: false\n        });\n    }, []);\n\n    return [player, updatePlayerPos, resetPlayer, playerRotate];\n}","import {useState, useEffect, useCallback} from 'react';\n\nexport const useGameStatus = rowsCleared => {\n    const [score, setScore] = useState(0);\n    const [rows, setRows] = useState(0);\n    const [level, setLevel] = useState(0);\n\n    const linePoints = [\n        40,\n        100,\n        300,\n        1200\n    ];\n\n    const calcScore = useCallback(() => {\n        // We have score\n        if( rowsCleared > 0) {\n            setScore(prev => prev + linePoints[rowsCleared -1 ] * (level + 1));\n            setRows(prev => prev + rowsCleared);\n        }\n    }, [level, linePoints, rowsCleared]);\n\n    useEffect(() => {\n        calcScore();\n    }, [calcScore, rowsCleared, score])\n\n    return [score, setScore, rows, setRows, level, setLevel];\n}","import { useEffect, useRef } from 'react';\n\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n  }, [delay]);\n}\n","import React from 'react';\nimport Tetris from './components/Tetris';\n\nconst App = () => (\n  <div className=\"App\">\n    <Tetris />\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}